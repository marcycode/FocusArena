// Load environment variables first
import dotenv from 'dotenv';
dotenv.config();

import { createClient, SupabaseClient } from '@supabase/supabase-js';

// Define a basic database type for now
interface Database {
  // This will be auto-generated by Prisma
  [key: string]: any;
}

export class SupabaseService {
  private client: SupabaseClient<Database>;
  private anonClient: SupabaseClient<Database>;

  constructor() {
    const supabaseUrl = process.env.SUPABASE_URL;
    const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    // Debug logging
    console.log('Environment variables check:');
    console.log('SUPABASE_URL:', supabaseUrl ? 'Found' : 'Missing');
    console.log('SUPABASE_ANON_KEY:', supabaseAnonKey ? 'Found' : 'Missing');
    console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? 'Found' : 'Missing');

    if (!supabaseUrl || !supabaseAnonKey || !supabaseServiceKey) {
      console.error('Missing environment variables:');
      console.error('SUPABASE_URL:', supabaseUrl);
      console.error('SUPABASE_ANON_KEY:', supabaseAnonKey ? '[PRESENT]' : '[MISSING]');
      console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '[PRESENT]' : '[MISSING]');
      throw new Error('Missing Supabase environment variables');
    }

    // Service role client for admin operations
    this.client = createClient<Database>(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });

    // Anon client for public operations
    this.anonClient = createClient<Database>(supabaseUrl, supabaseAnonKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });
  }

  /**
   * Get the service role client for admin operations
   */
  getClient(): SupabaseClient<Database> {
    return this.client;
  }

  /**
   * Get the anon client for public operations
   */
  getAnonClient(): SupabaseClient<Database> {
    return this.anonClient;
  }

  /**
   * Test the Supabase connection
   */
  async testConnection(): Promise<boolean> {
    try {
      const { data, error } = await this.client.from('users').select('count').limit(1);
      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Supabase connection test failed:', error);
      return false;
    }
  }
}

// Export singleton instance
export const supabaseService = new SupabaseService();